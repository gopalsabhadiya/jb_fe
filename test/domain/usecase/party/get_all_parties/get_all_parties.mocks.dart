// Mocks generated by Mockito 5.0.16 from annotations
// in jb_fe/test/domain/usecase/party/get_all_parties/get_all_parties.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:jb_fe/backend_integration/domain/entities/party.dart' as _i2;
import 'package:jb_fe/backend_integration/domain/repositories/party_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakePartyEntity_0 extends _i1.Fake implements _i2.PartyEntity {}

/// A class which mocks [PartyRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPartyRepository extends _i1.Mock implements _i3.PartyRepository {
  MockPartyRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.PartyEntity>> getAllParties() => (super.noSuchMethod(
          Invocation.method(#getAllParties, []),
          returnValue: Future<List<_i2.PartyEntity>>.value(<_i2.PartyEntity>[]))
      as _i4.Future<List<_i2.PartyEntity>>);
  @override
  _i4.Future<List<_i2.PartyEntity>> getPartyPage(int? pageNumber) =>
      (super.noSuchMethod(Invocation.method(#getPartyPage, [pageNumber]),
              returnValue:
                  Future<List<_i2.PartyEntity>>.value(<_i2.PartyEntity>[]))
          as _i4.Future<List<_i2.PartyEntity>>);
  @override
  _i4.Future<_i2.PartyEntity> getParty(String? partyId) =>
      (super.noSuchMethod(Invocation.method(#getParty, [partyId]),
              returnValue: Future<_i2.PartyEntity>.value(_FakePartyEntity_0()))
          as _i4.Future<_i2.PartyEntity>);
  @override
  _i4.Future<_i2.PartyEntity> addParty(_i2.PartyEntity? party) =>
      (super.noSuchMethod(Invocation.method(#addParty, [party]),
              returnValue: Future<_i2.PartyEntity>.value(_FakePartyEntity_0()))
          as _i4.Future<_i2.PartyEntity>);
  @override
  _i4.Future<_i2.PartyEntity> updateParty(_i2.PartyEntity? party) =>
      (super.noSuchMethod(Invocation.method(#updateParty, [party]),
              returnValue: Future<_i2.PartyEntity>.value(_FakePartyEntity_0()))
          as _i4.Future<_i2.PartyEntity>);
  @override
  _i4.Future<void> deleteParty(String? partyId) =>
      (super.noSuchMethod(Invocation.method(#deleteParty, [partyId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<List<_i2.PartyEntity>> searchParty(String? searchTerm) =>
      (super.noSuchMethod(Invocation.method(#searchParty, [searchTerm]),
              returnValue:
                  Future<List<_i2.PartyEntity>>.value(<_i2.PartyEntity>[]))
          as _i4.Future<List<_i2.PartyEntity>>);
  @override
  String toString() => super.toString();
}
